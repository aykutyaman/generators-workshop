/**
 * Generate values as long as we keep asking for them.
 */
function *something() {
  var nextVal;
  while (true) {
    if (nextVal === undefined) {
      nextVal = 1;
    } else {
      nextVal = (3 * nextVal) + 6;
    }
    // The generator pauses at each yield
    yield nextVal;
  }
}

for (var v of something()) {
  console.log(v);

  // don't let the loop run forever!
  if (v > 500) {
    break;
  }
}
// 1 9 33 105 321 969

/**
 * NOTE:
 * - We did something() because something is generator, not iterable. We 
 * have to call `something()` to construct a producer
 * - `something()` call produces iterator, but `for..of` loop wants an iterable, right?
 * The generator's iterator also has a `Symbol.iterator` function on it, which basically
 * does `return this`. In other words, a generator's iterator is also iterable.
 */